#   n3 definition of some list functions
#
# $Id: list.n3,v 1.3 2010-03-26 20:41:54 timbl Exp $

@prefix cc: <http://creativecommons.org/ns#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix doc: <http://www.w3.org/2000/01/pim/doc#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix : <#>.

<>  rdfs:label "n3 definition of some list functions";
    rdfs:comment """This is an ontology for computable list functions.""";
    cc:license <http://www.w3.org/Consortium/Legal/copyright-software>.

list:append a rdf:Property, owl:FunctionalProperty;
    rdfs:label "append";
    rdfs:domain log:List;
    rdfs:comment """Concatenates separate lists into a single list. 

`true` if and only if the subject is a list of lists and the concatenation of all those lists is `$o`.

`$o` can be calculated as a function of the subject. 

Example: `( (1 2) (3 4) ) list:append (1 2 3 4).`""";
    rdfs:isDefinedBy <>.

list:first a rdf:Property, owl:FunctionalProperty;
    rdfs:label "first";
    rdfs:domain log:List;
    rdfs:comment """Extracts the first member of a list. 

`true` if and only the subject is a list and `$o` is the first member of that list.

`$o` can be calculated as a function of the subject.""";
    vs:term_status "unstable";
    rdfs:isDefinedBy <>.

list:in a rdf:Property;
    rdfs:label "in";
    rdfs:range log:List;
    rdfs:comment """Determines if an subject is a member of the object list or binds every member of the object list to the subject.

`true` if and only `$o` is a list and `$s` is in that list.

`$s` can be calculated from `$o`.""";
    rdfs:isDefinedBy <>.

list:iterate a rdf:Property, owl:FunctionalProperty;
    rdfs:label "iterate";
    rdfs:domain log:List;
    rdfs:range log:List;
    rdfs:comment """Iterates over index/value pairs of the subject list.
Gets the matching pair of list index and list value for every member of the subject.
If the object is a variable, it will create a solution for each member of the subject list.
If any member of the object list is a variable, it will create a solution for all matching
members of the subject list.

If the object is ground and the entry at the specified index matches the specified value, 
it evaluates to `true`; otherwise, `false`.

Example: `( 1 2 3 ) list:iterate ($i $v).`""";
    rdfs:isDefinedBy <>.

list:last a rdf:Property, owl:FunctionalProperty;
    rdfs:label "in";
    rdfs:domain log:List;
    rdfs:comment """Extracts the first member of a list. 

`true` if and only the subject is a list and `$o` is the last member of that list.

`$o` can be calculated as a function of the subject.""";
    rdfs:isDefinedBy <>.

list:length a rdf:Property, owl:FunctionalProperty;
    rdfs:label "length";
    rdfs:domain log:List;
    rdfs:range xsd:integer;
    rdfs:comment """Calculates the length of a list.

`true` if and only the subject is a list and `$o` is integer length of that list.

`$o` can be calculated as a function of the subject.""";
    vs:term_status "unstable";
    rdfs:isDefinedBy <>.

list:member a rdf:Property;
    rdfs:label "member";
    rdfs:domain log:List;
    rdfs:comment """Determines if an object is a member of the subject list or binds every member of the subject list to the object.

`true` if and only `$s` is a list and `o` is in that list.

`$o` can be calculated from `$s`.""";
    rdfs:isDefinedBy <>.

list:memberAt a rdf:Property;
    rdfs:label "memberAt";
    rdfs:domain log:List;
    rdfs:comment """Gets the member of a list at a given position (where the position of the first element is 1).

`true` if and only if `$s_0` has an element at position `$s_1`, and if that element and `$o` can unify.

Note that if `$s_1` is a variable, this builtin may bind it to more than one value (e.g. `((“A” “B” “A”) ?i) list:memberAt "A"`).

In case of a negative integer, the index will count backwards from the length of the list.""";
    vs:term_status "unstable";
    rdfs:isDefinedBy <>.

list:remove a rdf:Property, owl:FunctionalProperty;
    rdfs:label "remove";
    rdfs:domain log:List;
    rdfs:range log:List;
    rdfs:comment """Removes the second component of the subject list from the first component of that list.

`true` if and only if the subject is a list of two lists `$s_1` and `$s_2`, `$s_2` is a subset of `$s_1` and `$o` is a list composed of the members of the `$s_1` with all members of `$s_2` removed, matching left to right.

`$o` can be calculated as a function of the subject.

Example: `( (1 2 3 4) (2 3) ) list:remove (1 4).`""";
    vs:term_status "unstable";
    rdfs:isDefinedBy <>.

list:union rdf:type rdf:Property;
    rdfs:label "union";
    rdfs:domain log:List;
    rdfs:range log:List;
    rdfs:comment "The union of the elements of the list.";
    vs:term_status "unstable";
    rdfs:isDefinedBy <>.

log:intersection a rdf:Property;
    rdfs:label "intersection";
    rdfs:domain log:List;
    rdfs:range log:List;
    rdfs:comment "The intersection of the elements of the list.";
    vs:term_status "unstable";
    rdfs:isDefinedBy <>.

log:except a rdf:Property;
    rdfs:label "except";
    rdfs:domain log:List;
    rdfs:range log:List;
    rdfs:comment "Returns a list which contains exactly those items which are in  the first list and not in the second list.";
    vs:term_status "unstable";
    rdfs:isDefinedBy <>.
 
